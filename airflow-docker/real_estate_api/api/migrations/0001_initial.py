# Generated by Django 4.2.18 on 2025-02-01 01:30

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(max_length=50, unique=True)),
                ('profile_image', models.CharField(max_length=200, null=True)),
                ('last_login_at', models.DateTimeField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='custom_user_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_set', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
                'managed': True,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('area_name', models.CharField(max_length=100)),
                ('latitude', models.FloatField(null=True)),
                ('longitude', models.FloatField(null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'addresses',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Notice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'notices',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PropertyInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('property_id', models.BigIntegerField(unique=True)),
                ('property_type', models.CharField(max_length=50)),
                ('property_subtype', models.CharField(max_length=50)),
                ('building_name', models.CharField(blank=True, max_length=100, null=True)),
                ('detail_address', models.CharField(blank=True, max_length=200, null=True)),
                ('construction_date', models.CharField(blank=True, max_length=10, null=True)),
                ('total_area', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('exclusive_area', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('land_area', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('on_floor', models.IntegerField(blank=True, null=True)),
                ('under_floor', models.IntegerField(blank=True, null=True)),
                ('room_count', models.IntegerField(blank=True, null=True)),
                ('bathroom_count', models.IntegerField(blank=True, null=True)),
                ('parking_count', models.IntegerField(blank=True, null=True)),
                ('heating_type', models.CharField(blank=True, max_length=50, null=True)),
                ('direction', models.CharField(blank=True, max_length=50, null=True)),
                ('purpose_type', models.CharField(blank=True, max_length=50, null=True)),
                ('current_usage', models.CharField(blank=True, max_length=100, null=True)),
                ('recommended_usage', models.CharField(blank=True, max_length=100, null=True)),
                ('facilities', models.JSONField(blank=True, default=dict, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('move_in_type', models.CharField(blank=True, max_length=50, null=True)),
                ('move_in_date', models.CharField(blank=True, max_length=10, null=True)),
                ('loan_availability', models.CharField(blank=True, max_length=50, null=True)),
                ('negotiable', models.CharField(default='N', max_length=2)),
                ('photos', models.JSONField(default=dict)),
                ('update_count', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('inactive_reason', models.CharField(blank=True, max_length=200, null=True)),
                ('first_seen', models.DateTimeField(auto_now_add=True)),
                ('last_seen', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'property_info',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PropertyLocation',
            fields=[
                ('property_id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('sido', models.CharField(max_length=50)),
                ('sigungu', models.CharField(max_length=50)),
                ('dong', models.CharField(max_length=50, null=True)),
                ('jibun_main', models.CharField(max_length=20)),
                ('jibun_sub', models.CharField(max_length=20, null=True)),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9, null=True)),
            ],
            options={
                'db_table': 'property_locations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Rental',
            fields=[
                ('property_id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('rental_type', models.CharField(max_length=50)),
                ('deposit', models.BigIntegerField(default=0)),
                ('monthly_rent', models.BigIntegerField(default=0)),
            ],
            options={
                'db_table': 'rentals',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Sale',
            fields=[
                ('property_id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('price', models.BigIntegerField(default=0)),
                ('end_date', models.CharField(max_length=10, null=True)),
                ('transaction_date', models.CharField(max_length=10, null=True)),
            ],
            options={
                'db_table': 'sales',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(max_length=50)),
                ('action_detail', models.JSONField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_logs',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Subway',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('line_info', models.CharField(max_length=50)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('address', models.ForeignKey(db_column='address_id', on_delete=django.db.models.deletion.CASCADE, to='api.address')),
            ],
            options={
                'db_table': 'subway_stations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'feedbacks',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CulturalFestival',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('festival_name', models.CharField(max_length=255)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('address', models.ForeignKey(db_column='address_id', on_delete=django.db.models.deletion.CASCADE, to='api.address')),
            ],
            options={
                'db_table': 'cultural_festivals',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CulturalFacility',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('facility_name', models.CharField(max_length=255)),
                ('facility_type', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('address', models.ForeignKey(db_column='address_id', on_delete=django.db.models.deletion.CASCADE, to='api.address')),
            ],
            options={
                'db_table': 'cultural_facilities',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CrimeStats',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('reference_date', models.DateField()),
                ('total_crime_count', models.IntegerField()),
                ('violent_crime_count', models.IntegerField()),
                ('theft_crime_count', models.IntegerField()),
                ('intellectual_crime_count', models.IntegerField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('address', models.ForeignKey(db_column='address_id', on_delete=django.db.models.deletion.CASCADE, related_name='crime_stats', to='api.address')),
            ],
            options={
                'db_table': 'crime_stats',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('ai_response', models.TextField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'chats',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LocationDistance',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('distance', models.FloatField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('address', models.ForeignKey(db_column='address_id', on_delete=django.db.models.deletion.CASCADE, to='api.address')),
                ('property', models.ForeignKey(db_column='property_id', on_delete=django.db.models.deletion.CASCADE, to='api.propertylocation')),
            ],
            options={
                'db_table': 'location_distances',
                'managed': True,
                'indexes': [models.Index(fields=['property'], name='location_di_propert_8941e7_idx'), models.Index(fields=['address'], name='location_di_address_e4845b_idx')],
            },
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.propertyinfo')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'favorites',
                'managed': True,
                'unique_together': {('user', 'property')},
            },
        ),
    ]
